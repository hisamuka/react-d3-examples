{"ast":null,"code":"var _jsxFileName = \"/Users/hisamuka/workspace/react-d3-examples/zoom-d3-react/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport * as d3 from \"d3\";\nconst random = d3.randomNormal(5, 1);\n\nclass Scatterplot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateD3(props);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.updateD3(nextProps);\n  }\n\n  updateD3(props) {\n    const data = props.data,\n          width = props.width,\n          height = props.height,\n          zoomTransform = props.zoomTransform,\n          zoomType = props.zoomType;\n    this.xScale = d3.scaleLinear().domain([0, d3.max(data, ([x, y]) => x)]).range([0, width]), this.yScale = d3.scaleLinear().domain([0, d3.max(data, ([x, y]) => y)]).range([0, height]);\n\n    if (zoomTransform && zoomType === \"detail\") {\n      this.xScale.domain(zoomTransform.rescaleX(this.xScale).domain());\n      this.yScale.domain(zoomTransform.rescaleY(this.yScale).domain());\n    }\n  }\n\n  get transform() {\n    const _this$props = this.props,\n          x = _this$props.x,\n          y = _this$props.y,\n          zoomTransform = _this$props.zoomTransform,\n          zoomType = _this$props.zoomType;\n    let transform = \"\";\n\n    if (zoomTransform && zoomType === \"scale\") {\n      transform = \"translate(\".concat(x + zoomTransform.x, \", \").concat(y + zoomTransform.y, \") scale(\").concat(zoomTransform.k, \")\");\n    } else {\n      transform = \"translate(\".concat(x, \", \").concat(y, \")\");\n    }\n\n    return transform;\n  }\n\n  render() {\n    const data = this.props.data;\n    return React.createElement(\"g\", {\n      transform: this.transform,\n      ref: \"scatterplot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, data.map(([x, y]) => React.createElement(\"circle\", {\n      cx: this.xScale(x),\n      cy: this.yScale(y),\n      r: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: d3.range(200).map(_ => [random(), random()]),\n      zoomTransform: null\n    };\n    this.zoom = d3.zoom().scaleExtent([-5, 5]).translateExtent([[-100, -100], [props.width + 100, props.height + 100]]).extent([[-100, -100], [props.width + 100, props.height + 100]]).on(\"zoom\", this.zoomed.bind(this));\n  }\n\n  componentDidMount() {\n    d3.select(this.refs.svg).call(this.zoom);\n  }\n\n  componentDidUpdate() {\n    d3.select(this.refs.svg).call(this.zoom);\n  }\n\n  zoomed() {\n    this.setState({\n      zoomTransform: d3.event.transform\n    });\n  }\n\n  render() {\n    const zoomTransform = this.state.zoomTransform,\n          _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height;\n    return React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      ref: \"svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Scatterplot, {\n      data: this.state.data,\n      x: 0,\n      y: 0,\n      width: width / 2,\n      height: height,\n      zoomTransform: zoomTransform,\n      zoomType: \"scale\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Scatterplot, {\n      data: this.state.data,\n      x: width / 2,\n      y: 0,\n      width: width / 2,\n      height: height,\n      zoomTransform: zoomTransform,\n      zoomType: \"detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Chart, {\n  width: 1000,\n  height: 500,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}), document.getElementById(\"chart\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/hisamuka/workspace/react-d3-examples/zoom-d3-react/src/index.js"],"names":["React","ReactDOM","serviceWorker","d3","random","randomNormal","Scatterplot","Component","constructor","props","updateD3","componentWillUpdate","nextProps","data","width","height","zoomTransform","zoomType","xScale","scaleLinear","domain","max","x","y","range","yScale","rescaleX","rescaleY","transform","k","render","map","Chart","state","_","zoom","scaleExtent","translateExtent","extent","on","zoomed","bind","componentDidMount","select","refs","svg","call","componentDidUpdate","setState","event","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as d3 from \"d3\";\n\n\nconst random = d3.randomNormal(5, 1);\n\nclass Scatterplot extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateD3(props);\n    }\n    componentWillUpdate(nextProps) {\n        this.updateD3(nextProps);\n    }\n    updateD3(props) {\n        const { data, width, height, zoomTransform, zoomType } = props;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, d3.max(data, ([x, y]) => x)])\n            .range([0, width]),\n            this.yScale = d3.scaleLinear()\n                .domain([0, d3.max(data, ([x, y]) => y)])\n                .range([0, height]);\n\n        if (zoomTransform && zoomType === \"detail\") {\n            this.xScale.domain(zoomTransform.rescaleX(this.xScale).domain());\n            this.yScale.domain(zoomTransform.rescaleY(this.yScale).domain());\n        }\n    }\n    get transform() {\n        const { x, y, zoomTransform, zoomType } = this.props;\n        let transform = \"\";\n\n        if (zoomTransform && zoomType === \"scale\") {\n            transform = `translate(${x + zoomTransform.x}, ${y + zoomTransform.y}) scale(${zoomTransform.k})`;\n        }else{\n            transform = `translate(${x}, ${y})`;\n        }\n\n        return transform;\n    }\n    render() {\n        const { data } = this.props;\n\n        return (\n            <g transform={this.transform} ref=\"scatterplot\">\n                {data.map(([x, y]) => <circle cx={this.xScale(x)} cy={this.yScale(y)} r={4} />)}\n            </g>\n        )\n    }\n}\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: d3.range(200).map(_ => [random(), random()]),\n            zoomTransform: null\n        }\n        this.zoom = d3.zoom()\n            .scaleExtent([-5, 5])\n            .translateExtent([[-100, -100], [props.width+100, props.height+100]])\n            .extent([[-100, -100], [props.width+100, props.height+100]])\n            .on(\"zoom\", this.zoomed.bind(this))\n    }\n    componentDidMount() {\n        d3.select(this.refs.svg)\n            .call(this.zoom)\n    }\n    componentDidUpdate() {\n        d3.select(this.refs.svg)\n            .call(this.zoom)\n    }\n    zoomed() {\n        this.setState({\n            zoomTransform: d3.event.transform\n        });\n    }\n    render() {\n        const { zoomTransform } = this.state,\n            { width, height } = this.props;\n\n        return (\n            <svg width={width} height={height} ref=\"svg\">\n                <Scatterplot data={this.state.data}\n                             x={0} y={0}\n                             width={width/2}\n                             height={height}\n                             zoomTransform={zoomTransform}\n                             zoomType=\"scale\" />\n                <Scatterplot data={this.state.data}\n                             x={width/2} y={0}\n                             width={width/2}\n                             height={height}\n                             zoomTransform={zoomTransform}\n                             zoomType=\"detail\" />\n            </svg>\n        )\n    }\n}\n\nReactDOM.render(<Chart width={1000} height={500} />, document.getElementById(\"chart\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}